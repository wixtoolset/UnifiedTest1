<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information. -->

<Project>
  <!-- <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
    <PackageReference Include="GitInfo" Version="2.1.2" PrivateAssets="All" />
  </ItemGroup> -->

  <PropertyGroup>
    <SigningToolFolder>$(ToolsFolder)</SigningToolFolder>
    <SigningToolExe>$(SigningToolFolder)\SignClient.exe</SigningToolExe>
    <SigningFilelist>$(SigningToolFolder)\empty-filelist.txt</SigningFilelist>
    <SigningConfiguration>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), signing.json))\signing.json</SigningConfiguration>
  </PropertyGroup>

  <Target Name="__FixupGitBaseVersion" BeforeTargets="_GitPopulateVersionInfo">
    <PropertyGroup>
      <GitBaseVersion>$(GitBaseVersion.Replace('{apiversion}', '$(ApiVersion)'))</GitBaseVersion>
      <GitBaseVersion>$(GitBaseVersion.Replace('{height}', '$(GitCommits)'))</GitBaseVersion>
      <GitBaseVersion>$(GitBaseVersion.Replace('{commits}', '$(GitCommits)'))</GitBaseVersion>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <GetPackageVersionDependsOn>
      $(GetPackageVersionDependsOn);
      __SetPropertiesFromGit;
    </GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="__SetPropertiesFromGit" DependsOnTargets="GitVersion" Condition=" '$(GitInfoImported)'=='true' ">
    <PropertyGroup>
      <AssemblyVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).0.0</AssemblyVersion>
      <FileVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch).$(GitCommits)</FileVersion>
      <PackageVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)$(GitSemVerDashLabel)</PackageVersion>
      <Version>$(PackageVersion)</Version>
      <InformationalVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)$(GitSemVerDashLabel)+$(GitSha)</InformationalVersion>
      <!-- We already included the $(GitSha) in the informational version so do not include it again.  -->
      <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    </PropertyGroup>

    <Message Importance="$(GitInfoReportImportance)" Text="Properties from Git:
  GitCommits: $(GitCommits)
  AssemblyVersion: $(AssemblyVersion)
  FileVersion: $(FileVersion)
  InformationalVersion: $(InformationalVersion)
  PackageVersion: $(PackageVersion)
" />
  </Target>

  <PropertyGroup>
    <GenerateNuspecDependsOn>
      $(GenerateNuspecDependsOn);
      __SetPropertiesFromGit;
      __SetNuspecProperties
    </GenerateNuspecDependsOn>
  </PropertyGroup>

  <Target Name="__SetNuspecProperties" DependsOnTargets="__SetPropertiesFromGit"
          Condition=" Exists('$(MSBuildProjectName).nuspec') ">
    <PropertyGroup>
      <ProjectUrl Condition=" '$(ProjectUrl)'=='' and '$(GitRepositoryUrl)'!='' ">$(GitRepositoryUrl.Replace('.git',''))</ProjectUrl>

      <NuspecFile Condition=" '$(NuspecFile)'=='' ">$(MSBuildProjectName).nuspec</NuspecFile>
      <PackageId Condition=" '$(PackageId)'=='' ">$(MSBuildProjectName)</PackageId>
      <Title Condition=" '$(Title)'=='' ">$(Description)</Title>
      <NuspecBasePath Condition=" '$(NuspecBasePath)'=='' ">$(OutputPath)</NuspecBasePath>
      <NuspecProperties>$(NuspecProperties);Id=$(PackageId);Version=$(PackageVersion);Authors=$(Authors);Configuration=$(Configuration)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);Copyright=$(Copyright);Description=$(Description);Title=$(Title)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);RepositoryType=git;RepositoryCommit=$(GitSha);RepositoryUrl=$(GitRepositoryUrl)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);ProjectUrl=$(ProjectUrl);ProjectFolder=$(MSBuildProjectDirectory)</NuspecProperties>
      <PublishRepositoryUrl>true</PublishRepositoryUrl>
      <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    </PropertyGroup>

    <Message Importance="$(GitInfoReportImportance)" Text="NuSpec info:
  NuspecFile: $(NuspecFile)
  NuspecBasePath: $(NuspecBasePath)
  NuspecProperties: $(NuspecProperties)
" />

  </Target>

  <Target Name="PackNative" DependsOnTargets="__SetNuspecProperties"
          Condition=" Exists('$(MSBuildProjectName).nuspec') ">

    <Exec Command='nuget pack $(NuspecFile) -OutputDirectory "$(PackageOutputPath.Trim(&quot;\&quot;))" -BasePath $(NuspecBasePath) -Properties "$(NuspecProperties)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" />

    <ItemGroup>
      <NuGetPackOutput Include="$(PackageOutputPath)\$(PackageId).$(PackageVersion).nupkg" />
    </ItemGroup>
  </Target>

  <Target Name="_GetSignClient"
          Condition=" !Exists('$(SigningToolExe)') ">

    <WriteLinesToFile File='$(SigningFilelist)' Lines='do-not-sign-files-in-nupkg' Overwrite='true' />

    <Exec Command='dotnet.exe tool install --tool-path "$(SigningToolFolder)" SignClient' />
  </Target>

  <Target Name="SignOutput" DependsOnTargets="_GetSignClient" AfterTargets="AfterBuild"
          Condition=" '$(SigningUser)'!='' and '$(SignOutput)'!='false' and 
                      ('$(MSBuildProjectExtension)'=='.csproj' or ('$(MSBuildProjectExtension)'=='.vcxproj' and '$(ConfigurationType)'!='StaticLibrary'))">

    <Exec Command='"$(SigningToolExe)" sign -i $(TargetPath) -c "$(SigningConfiguration)" -n "WiX Toolset" -d "WiX Toolset" -u https://wixtoolset.org/ -r "$(SigningUser)" -s "$(SigningSecret)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Target Name="SignNupkg" DependsOnTargets="_GetSignClient" AfterTargets="Pack;PackNative"
          Condition=" '$(SigningUser)'!='' and '@(NuGetPackOutput)'!='' and '$(SignNupkg)'!='false' ">
    <ItemGroup>
      <SigningNupkgs Include="@(NuGetPackOutput)" Condition=" '%(Extension)'=='.nupkg' " />
    </ItemGroup>

    <Exec Command='"$(SigningToolExe)" sign -i "@(SigningNupkgs->&apos;%(Identity)&apos;)" -c "$(SigningConfiguration)" -f "$(SigningFilelist)" -n "WiX Toolset" -d "WiX Toolset" -u https://wixtoolset.org/ -r "$(SigningUser)" -s "$(SigningSecret)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Import Project="Directory$(MSBuildProjectExtension).targets" Condition=" Exists('Directory$(MSBuildProjectExtension).targets') " />
  <Import Project="Custom.Build.targets" Condition=" Exists('Custom.Build.targets') " />
</Project>
